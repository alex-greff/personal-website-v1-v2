// --------------------------------------
// --- Helper functions for pow-float ---
// --------------------------------------
@function factorial($number) {
    $value: 1;

    @if $number > 0 {
        @for $i from 1 through $number {
            $value: $value * $i;
        }
    }

    @return $value;
}
  
@function summation($iteratee, $input, $initial: 0, $limit: 100) {
    $sum: 0;
    
    @for $index from $initial to $limit {
        $sum: $sum + call(get-function($iteratee), $input, $index);
    }
    
    @return $sum;
}
  
@function exp-maclaurin($x, $n) {
    @return (pow-float($x, $n) / factorial($n));
}
  
@function exp($value) {
    @return summation('exp-maclaurin', $value, 0, 100);
}
  
@function ln-maclaurin($x, $n) {
    @return (pow-float(-1, $n + 1) / $n) * (pow-float($x - 1, $n));
}
  
@function ln($value) {
    $ten-exp: 1;
    $ln-ten: 2.30258509;
    
    @while ($value > pow-float(10, $ten-exp)) {
      $ten-exp: $ten-exp + 1;
    }
    
    @return summation(ln-maclaurin, $value / pow-float(10, $ten-exp), 1, 100) + $ten-exp * $ln-ten;
}

// --------------------
// --- Trig Helpers ---
// --------------------
@function pi() {
    @return 3.14159265359;
}

@function rad($angle) {
    $unit: unit($angle);
    $unitless: $angle / ($angle * 0 + 1);
    // If the angle has 'deg' as unit, convert to radians.
    @if $unit == deg {
        $unitless: $unitless / 180 * pi();
    }
    @return $unitless;
}